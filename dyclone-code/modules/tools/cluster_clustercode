#!/bin/bash

# All directory names are absolute paths for easy handling

# NOTE: 'wait $pid' may not work correctly if the shell invokes too many short-lifed subprocesses so that $pid points to an old, finished process, instead of the actual recent process 'wait' is intended for.
# Such a bash-limitation caused some hanging processes in our code; as often as several times out of a thousand;
# It seems difficult to circumvent this without much more complicated code. TODO: at least, should make sure output file is right.

CC=gcc
CCFLAGS="-O3 -I ${scriptdir}/../C/ ${scriptdir}/../C/libdyc.so"
debug="f"

metadatadir=CLSRTT.0.0
linklimit=2000
overlaplimit=90
MAXDEPTH=10
# For each input, the distance between two outputs allowed
stepsimlimit="1.0"
waittokilltime=500000


# calculate the depth of an input directory
# parameter:
# $1 - the *full* path of a cluster
inputdepth ()
{
    local abspath=$(cd $1; pwd) # normalize the pathname first
    if [ "$rootdir" != "" ]; then
        abspath=${abspath##$rootdir}
    fi
    echo $abspath | awk 'BEGIN{FS="/"} {print NF}' # return via stdout
}

# Given an input directory, to see whether we should stop
# parameter:
# $1 - the *full* path of a cluster
oktoterminate ()
{
    local nf=`cat $1/$metadatadir/L* | wc -l`
    if [ $nf -le 1 ]; then
        return 1  # only one file or an error in the cluster, stop
    fi

    # Opt 3: combine the Opt 1 and 2.
    # Opt 1: based on the depth of an input; seems a lot of waste according to the exp on 100 files
    local currentdepth=$( inputdepth $1 )
    if [ $currentdepth -lt $MAXDEPTH ]; then
        return 0 # to continue
    else
        # reach the limit, check Opt 2
        # Opt 2: based on the changes for an input; may introduce more false positives than Opt 1, due to our similarity definition
        ##local nc=`find $1/.. -maxdepth 1 -name "[[:digit:]]*" | wc -l`
        local nc=`cat $1/../$metadatadir/H* | wc -l`
        if [ $nc -gt 1 ]; then
            return 0 # still have changes, to continue
        else
            return 1 # no more changes, to stop 
        fi
    fi
}

# check whether two code files overlap more than a threshold
# $1 - code file 1
# $2 - code file 2
# $3 - threshold (default 50%)
# return 0 if overlap; otherwise 1
isoverlap ()
{
    local threshold=50
    if ! [ -f $1 ]; then
        echo "Error: isoverlap: '$1' doesn't exist." 1>&2
        return 1
    fi
    if ! [ -f $2 ]; then
        echo "Error: isoverlap: '$2' doesn't exist." 1>&2
        return 1
    fi
    if [ "$3" != "" ]; then
        threshold=$3
    fi
    if [ "`dirname $1`" != "`dirname $2`" ]; then
        return 1
    fi
    local codefile1=`basename $1`
    local codefile2=`basename $2`
    if [ "$codefile1" == "$codefile2" ]; then 
        return 0
    fi
    codefile1=${codefile1%%.*}
    local ebyte1=${codefile1##*-}
    codefile1=${codefile1%-$ebyte1}
    local eline1=${codefile1##*_}
    codefile1=${codefile1%_$eline1}
    local sbyte1=${codefile1##*-}
    codefile1=${codefile1%-$sbyte1}
    local sline1=${codefile1##*_}
    codefile1=${codefile1%_$sline1}
    codefile2=${codefile2%%.*}
    local ebyte2=${codefile2##*-}
    codefile2=${codefile2%-$ebyte2}
    local eline2=${codefile2##*_}
    codefile2=${codefile2%_$eline2}
    local sbyte2=${codefile2##*-}
    codefile2=${codefile2%-$sbyte2}
    local sline2=${codefile2##*_}
    codefile2=${codefile2%_$sline2}
    if [ "$codefile1" != "$codefile2" ]; then
        return 1
    fi
    # due to CIL's transformation (e.g., for loops), $sbyte1>$ebyte1 is possible
    if [ $sbyte1 -gt $ebyte1 ]; then
        local tmp=$sbyte1
        sbyte1=$ebyte1
        ebyte1=$tmp
    fi
    if [ $sbyte2 -gt $ebyte2 ]; then
        local tmp=$sbyte2
        sbyte2=$ebyte2
        ebyte2=$tmp
    fi

    # compare:
    # Opt 2: overlap>$overlaplimit or contained>$overlaplimit then true
    if [[ $sbyte1 -ge $sbyte2 && $sbyte1 -le $ebyte2 ]]; then
        if [ $ebyte1 -le $ebyte2 ]; then
            local overlapped=`expr \( $ebyte1 - $sbyte1 \) \* 100`
            local total2=`expr $threshold \* \( $ebyte2 - $sbyte2 \)`
            if [[ $overlapped -ge $total2 ]]; then
                return 0
            else
                return 1
            fi
        else
            local overlapped=`expr \( $ebyte2 - $sbyte1 \) \* 100`
            local total1=`expr $threshold \* \( $ebyte1 - $sbyte1 \)`
            local total2=`expr $threshold \* \( $ebyte2 - $sbyte2 \)`
            if [[ $overlapped -ge $total1 && $overlapped -ge $total2 ]]; then
                return 0
            else
                return 1
            fi
        fi
    elif [[ $ebyte1 -ge $sbyte2 && $ebyte1 -le $ebyte2 ]]; then
        if [ $sbyte1 -ge $sbyte2 ]; then
            local overlapped=`expr \( $ebyte1 - $sbyte1 \) \* 100`
            local total2=`expr $threshold \* \( $ebyte2 - $sbyte2 \)`
            if [[ $overlapped -ge $total2 ]]; then
                return 0
            else
                return 1
            fi
        else
            local overlapped=`expr \( $ebyte1 - $sbyte2 \) \* 100`
            local total1=`expr $threshold \* \( $ebyte1 - $sbyte1 \)`
            local total2=`expr $threshold \* \( $ebyte2 - $sbyte2 \)`
            if [[ $overlapped -ge $total1 && $overlapped -ge $total2 ]]; then
                return 0
            else
                return 1
            fi
        fi
    fi
    return 1
    # Opt 1: overlap>$overlaplimit or contained then true
    if [[ $sbyte1 -ge $sbyte2 && $sbyte1 -le $ebyte2 ]]; then
        if [ $ebyte1 -le $ebyte2 ]; then
            return 0
        else
            local overlapped=`expr \( $ebyte2 - $sbyte1 \) \* 100`
            local total1=`expr $threshold \* \( $ebyte1 - $sbyte1 \)`
            local total2=`expr $threshold \* \( $ebyte2 - $sbyte2 \)`
            if [[ $overlapped -ge $total1 || $overlapped -ge $total2 ]]; then
                return 0
            else
                return 1
            fi
        fi
    elif [[ $ebyte1 -ge $sbyte2 && $ebyte1 -le $ebyte2 ]]; then
        if [ $sbyte1 -ge $sbyte2 ]; then
            return 0
        else
            local overlapped=`expr \( $ebyte1 - $sbyte2 \) \* 100`
            local total1=`expr $threshold \* \( $ebyte1 - $sbyte1 \)`
            local total2=`expr $threshold \* \( $ebyte2 - $sbyte2 \)`
            if [[ $overlapped -ge $total1 || $overlapped -ge $total2 ]]; then
                return 0
            else
                return 1
            fi
        fi
    fi
}


# move the code into a new subcluster unconditionally
# parameters:
# $1 - the current cluster directory
# $2 - the full name of the code trunk
# $3 - the next available unique id for input/cluster
movecodetoanewcluster ()
{
    if [[ "$debug" == "true" ]]; then
        echo "ClusterCode: movecodetoanewcluster $1 $2 $3" 1>&2
    fi

    if ! [ -d $1 ]; then
        echo "Error: movecodetoanewcluster: cluster '$1' not exist" 1>&2
        return 65
    fi
    local currentid=`basename $1`
    if [ "$currentid" == "" ]; then
        echo "Error: movecodetoanewcluster: no id assigned for the input" 1>&2
        return 65
    fi
    local codefile=$2
    if [ ! -f "$codefile" ]; then
        echo "Error: movecodetoanewcluster: '$codefile' invalid" 1>&2
        return 65
    fi
    local spareid=$3
    if [[ "$spareid" == "" || $spareid -le $currentid ]]; then
        echo "Error: movecodetoanewcluster: next id '$spareid' invalid. Current id $currentid" 1>&2
        return 65
    fi

    mkdir -p "$1/$spareid/$metadatadir"
    # add a new entry in the "H" file for the current cluster
    echo "$spareid" >> "$1/$metadatadir/H$currentid"
    # use this code trunk as the representative for the new cluster
    echo "$codefile" > "$1/$spareid/$metadatadir/C$spareid"  # TODO: why would the bash reports an error here? It happened in our experiments. 
    # add this file into the file list of the new cluster
    echo "$codefile" > "$1/$spareid/$metadatadir/L$spareid"
    echo "$codefile" >> "$1/$metadatadir/pL$currentid"  # keep a log which files in $1 have been processed
    spareid=`expr $spareid + 1`
    echo "$spareid" > "$1/$metadatadir/nextid"
}


# parameters:
# $1 - .c file
# $2 - the cluster directory
# $3 - the current cluster/input ID
generaterandomvalues ()
{
    if [[ "$debug" == "true" ]]; then
        echo "ClusterCode: generaterandomvalues $1 $2 $3" 1>&2
    fi

    local codefile=$1
    local genexe=${codefile%.foo.c}.gen.exe
    if [[ ! -f "$genexe" ]]; then
        local genlinkfn=$(headerObjFile $codefile)
        if [[ $? -ne 0 ]]; then
          echo "Error: in generaterandomvalues: headerObjFile $codefile" 1>&2
          return 1
        fi
        if [ "$debug" == "true" ]; then
            echo "generaterandomvalues: ${CC} -o $genexe ${codefile%.foo.c}.gen.c $genlinkfn ${CCFLAGS}" 1>&2
        fi
        ${CC} -o "$genexe" "${codefile%.foo.c}.gen.c" "$genlinkfn" ${CCFLAGS} >& /dev/null # too slow to output to stderr
        if [ $? -ne 0 ]; then
          echo "Error: in generaterandomvalues: Compiling failure: $1" 1>&2
          return 1
        fi
    fi
    # store the generated input
    local ec=0
    local pidtokill=
    local killerpid=
    $genexe > "$2/I$3" &
    pidtokill=$!
    waittokillpid $pidtokill 4 >& /dev/null &
    killerpid=$!
    wait $pidtokill || ec=$?  # may not work correctly if $pidtokill is the same as an old, finished process.
    # leave the killer there in case 'wait' didn't work: kill $killerpid >& /dev/null &
    if [ $ec -ne 0 ]; then
        echo "Error: generaterandomvalues, $genexe failure" 1>&2
    fi
    return $ec
}

# Find the "smallest" .ins file in a cluster
# $1 - the cluster directory
smallestins ()
{
    local smallfn="__dummy_empty_file"
    local smallcc="300|200|100" # set to large numbers
    while read cfile; do
        cfile=`echo $cfile | cut -d' ' -f1`
        local insfn=${cfile%.c}.ins  
        local inscc=$( tail -n 1 $insfn | awk 'BEGIN{FS="|"} {printf("%d|%d|%d", $2, $3, $4)}' )
        # TODO: may have finer-grained comparison
        local comp=$( echo "${smallcc}|${inscc}" | awk 'BEGIN{FS="|"} {if($2<$5)print 0; else if ($2>$5)print 1; else if($3<=$6) print 0; else print 1;}' )
        if [ $comp -eq 1 ]; then
            smallcc=$inscc
            smallfn=$insfn
        fi
    done < $1/$metadatadir/L`basename $1`
    if [ $smallfn == "__dummy_empty_file" ]; then
        return 1
    else
        echo $smallfn
        return 0
    fi
}

# Find the "largest" .ins file in a cluster
# parameter
# $1 - the absolute path of a cluster
largestins ()
{
    local largefn="__dummy_empty_file"
    local largecc="0|0|0" # set to small numbers
    while read cfile; do
        cfile=`echo $cfile | cut -d' ' -f1`
        local insfn=${cfile%.c}.ins  
        local inscc=$( tail -n 1 $insfn | awk 'BEGIN{FS="|"} {printf("%d|%d|%d", $2, $3, $4)}' )
        # TODO: may have finer-grained comparison
        local comp=$( echo "${largecc}|${inscc}" | awk 'BEGIN{FS="|"} {if($2>$5)print 0; else if ($2<$5)print 1; else if($3>=$6) print 0; else print 1;}' )
        if [ $comp -eq 1 ]; then
            largecc=$inscc
            largefn=$insfn
        fi
    done < $1/$metadatadir/L`basename $1`
    if [ $largefn == "__dummy_empty_file" ]; then
        return 1
    else
        echo $largefn
        return 0
    fi
}

# return the representative .ins file name for a cluster.
# set the representative if not exist yet.
# parameter
# $1 - the absolute path of a cluster
getrepresentative ()
{
    local currentid=`basename $1`
    local repcodefn=$(head -n 1 $1/$metadatadir/C$currentid 2> /dev/null)
    local log=
    if [[ "$repcodefn" == "" ]]; then
        #no representative yet, set it:
        repcodefn=`head -n 1 $1/$metadatadir/L$currentid 2> /dev/null | cut -d' ' -f1`  # assume the sorted code list exists and file names do not contain ' '
        if [[ "$repcodefn" == "" ]]; then
            log="Warning: getrepresentative: Can't find a cluster representative for $1. Have you set the code list yet?"
            echo $log 1>&2
            echo $log >> $LOGFAILED
            return 1
        else
            echo "$repcodefn" > "$1/$metadatadir/C$currentid"
            echo "$repcodefn" # use this as a "return" value
            return 0
        fi
    elif [[ ! -f "$repcodefn" ]]; then  # check validity and return
        log="Error: getrepresentative: file content invalid: $1/$metadatadir/C$currentid"
        echo $log 1>&2
        echo $log >> $LOGFAILED
        return 1
    else
        echo "$repcodefn"
        return 0
    fi
}

# generate a set of permuted inputs based on one input and a .ins file
# parameters:
# $1 - the cluster directory (containing one input file $1/$metadatadir/I$currentid)
# $2 - a .ins file
# $3 - storage file for the generated inputs
# Update: since we use the code with the most in-vars as representatives, it seems ok to permuteinputs only once for each cluster, not for each code
# Update - put all permuted inputs into one file to save disk space.
#     Format: a separator (I$id)
permuteinputs ()
{
    if ! [ -d $1 ]; then
        echo "Error: permuteinputs: invalid cluster '$1'" 1>&2
        return 65
    fi
    local currentid=`basename $1`
    if [ "$currentid" == "" ]; then
        echo "Error: permuteinputs: no id assigned for the input" 1>&2
        return 65
    fi
    local insfn=$2
    local inscc=$( tail -n 1 $insfn | awk 'BEGIN{FS="|"} {printf("%d", $2)}' )
    local inscn=$( tail -n 1 $insfn | awk 'BEGIN{FS="|"} {printf("%d", $3)}' )
    local inscp=$( tail -n 1 $insfn | awk 'BEGIN{FS="|"} {printf("%d", $4)}' )
    #$scriptdir/permuteinputlines $1 $3/I$currentid.$someid
    if [[ "$debug" == "true" ]]; then
      echo "$scriptdir/shuffleinputs $1/$metadatadir/I$currentid $inscn $inscp $3 $currentid" 1>&2
    fi
    $scriptdir/shuffleinputs $1/$metadatadir/I$currentid $inscn $inscp $3 $currentid
    return $?
}

# compile a file and execute it
# parameters:
# $1 - the current cluster directory
# $2 - the code file name
# $3 - the input directory (containing all the permuted inputs)
# $4 - the output storage file (default: $1/$metadatadir/out)
# TODO: utilize "$!" and prepare killproc
executecode()
{
    if [ "$debug" == "true" ]; then
        echo "ClusterCode: executecode $1 $2 $3 $4" 1>&2
    fi

    if ! [ -d $1 ]; then
        echo "Error: executecode: invalid cluster '$1'" 1>&2
        return 65
    fi
    local currentid=`basename $1`
    if [ "$currentid" == "" ]; then
        echo "Error: executecode: no id assigned for the input" 1>&2
        return 65
    fi
    local codefile=$2
    if ! [ -f "$2" ]; then
        echo "Error: executecode: code trunk '$2' invalid" 1>&2
        return 65
    fi
    if ! [ -d $3 ]; then
        echo "Error: executecode: input directory invalid '$3'" 1>&2
        return 65
    fi

    # Compilation: may be done separately to improve the degree of parallelization.
    local exefile=${codefile%.c}.exe
    if [[ ! -f "$exefile" ]]; then
        local genlinkfn=$(headerObjFile $codefile)
        if [[ $? -ne 0 ]]; then
            echo "Error: executecode: headerObjFile $codefile" 1>&2
            return 1
        fi
        if [[ "$debug" == "true" ]]; then
            echo "executecode: ${CC} -o $exefile ${scriptdir}/../C/dycmain.o $codefile $genlinkfn ${CCFLAGS}" 1>&2
        fi
        ${CC} -o "$exefile" ${scriptdir}/../C/dycmain.o "$codefile" "$genlinkfn" ${CCFLAGS} >& /dev/null # too slow to output to stderr
        if [[ $? -ne 0 ]]; then
            echo "Error: executecode: Compiling failure: $2" 1>&2
            return 1
        fi
    fi

    # create and clean the directory for storing outputs
    local outputsfile=$1/$metadatadir/out
    if [ "$4" != "" ]; then
        echo "Warning: executecode: not supported output storage" 1>&2
    fi
    if [[ "$debug" == "true" ]]; then
        echo "ClusterCode: Create and clean output storage: $outputdir" 1>&2
    fi
    echo -n "" > "$outputsfile"

    # execute $2 with every input in $3.
    local ii=0
    local pidtokill=
    local killerpid=
    local ec=
    # too slow to extract every time: while ($scriptdir/extractinput $3 $currentid $ii > $3.itmp); do
    while read oneinput; do
        if [[ "$debug" == "true" ]]; then
            echo "executecode: $exefile $oneinput >> $outputsfile" 1>&2
        fi
        $exefile "$oneinput" > "$outputsfile.otmp" &
        pidtokill=$!
        waittokillpid $pidtokill 500000 >& /dev/null &
        killerpid=$!
        ec=0
        # cf. ./testkillpid
        if [[ "$debug" == "true" ]]; then
            echo "executecode: wait $pidtokill" 1>&2
        fi
        wait $pidtokill || ec=$?  # may not work correctly if $pidtokill is the same as an old, finished process.
        # leave the killer there in case 'wait' didn't work: kill $killerpid >& /dev/null &  # the killer may be still sleeping; we can kill it in background to save time
        # use $? as the suffix to distinguish succeeded runs from failed runs:
        if [[ "$debug" == "true" ]]; then
            echo "DEBUG (current pid $$): waittokillpid $pidtokill ($exefile); 'kill $killerpid' pid: $!" 1>&2
            if [[ $ec -ne 0 ]]; then
                echo "Execution failure in executecode: $exefile $oneinput >> $outputsfile.otmp" 1>&2
            fi
        fi
        echo "O$currentid.$ii.$ec" >> "$outputsfile"  # output separator
        cat "$outputsfile.otmp" >> "$outputsfile"
        ii=$((ii+1))
    done < <( find $3 -maxdepth 1 -name "I*" )
    if [ $ii -gt 0 ]; then
        rm $outputsfile.otmp
    fi
    return 0
}

# compile a representative file and execute it
# parameters:
# $1 - the current cluster directory (absolute and relative should both be fine)
# $2 - the code file name
# $3 - the input file
# $4 - the output file (default: $1/$metadatadir/O$currentid.0.$?)
executerepcode()
{
    if [ "$debug" == "true" ]; then
        echo "ClusterCode: executerepcode $1 $2 $3 $4" 1>&2
    fi

    if ! [ -d $1 ]; then
        echo "Error: executerepcode: invalid cluster '$1'" 1>&2
        return 65
    fi
    local currentid=`basename $1`
    if [ "$currentid" == "" ]; then
        echo "Error: executerepcode: no id assigned for the input" 1>&2
        return 65
    fi
    local codefile=$2
    if ! [ -f "$2" ]; then
        echo "Error: executerepcode: code trunk '$2' invalid" 1>&2
        return 65
    fi
    if ! [ -f $3 ]; then
        echo "Error: executerepcode: input file invalid '$3'" 1>&2
        return 65
    fi

    # set the output file
    if [ "$4" != "" ]; then
        echo "Warning: executerepcode: not supported output file" 1>&2
    fi
    local outputfn=$1/$metadatadir/O${currentid}.0

    # check exefile
    local exefile=${codefile%.c}.exe
    if [[ ! -f "$exefile" ]]; then
        local genlinkfn=$(headerObjFile $codefile)
        if [[ $? -ne 0 ]]; then
            echo "Error: executerepcode: headerObjFile $codefile" 1>&2
            return 1
        fi
        if [[ "$debug" == "true" ]]; then
            echo "executerepcode: ${CC} -o $exefile ${scriptdir}/../C/dycmain.o $codefile $genlinkfn ${CCFLAGS}" 1>&2
        fi
        ${CC} -o "$exefile" ${scriptdir}/../C/dycmain.o "$codefile" "$genlinkfn" ${CCFLAGS} >& /dev/null # too slow to output to stderr
        if [[ $? -ne 0 ]]; then
            echo "Error: executerepcode: Compiling failure: $2" 1>&2
            return 1
        fi
    fi

    # actual execution
    if [[ "$debug" == "true" ]]; then
        echo "executerepcode: $exefile $3 > $outputfn" 1>&2
    fi
    local pidtokill=
    local killerpid=
    $exefile "$3" > "$outputfn" &
    pidtokill=$!
    waittokillpid $pidtokill 500000 >& /dev/null &
    killerpid=$!
    local ec=0
    wait $pidtokill || ec=$?  # may not work correctly if $pidtokill is the same as an old, finished process; then $ec may not be right...TODO
    # leave the killer there in case 'wait' didn't work: kill $killerpid >& /dev/null &
    if [[ "$debug" == "true" && $ec -ne 0 ]]; then
        echo "Execution failure in executerepcode: $exefile $3 > $outputfn" 1>&2
    fi
    mv "${outputfn}" "${outputfn}.${ec}"
}

# for each code file, do execution and move together;
# this way the whole process may be easier to be incremental.
# $1 - the cluster directory
# $2 - the next id for input
executeandmoveall ()
{
    if [[ "$debug" == "true" ]]; then
        echo "ClusterCode: executeandmoveall $1" 1>&2
    fi

    local currentid=`basename $1`
    if [ "$currentid" == "" ]; then
        echo "Error: executeandmoveall: no id assigned for the cluster '$1'" 1>&2
        return 65
    fi
    if ! [ -d "$1" ];then
      echo "Error: executeandmoveall: invalid directory '$1'" 1>&2
      return 1
    fi
    local spareid=$2
    if [[ "$spareid" == "" || $spareid -le $currentid ]]; then
        echo "Error: executeandmoveall: next id '$spareid' invalid. Current id $currentid" 1>&2
        return 65
    fi

    # get the representative code file of the cluster
    local repcodefn=$(getrepresentative $1)
    if [[ $? -ne 0 || "$repcodefn" == "" ]]; then
        # invalid .c file
        echo "Error: executeandmoveall: invalid representative file '$repcodefn' for $1" 1>&2
        return 1
    fi

    local ec=0

    # generate random values for the .c file and store it as $1/$metadatadir/I$currentid
    generaterandomvalues $repcodefn $1/$metadatadir $currentid
    ec=$?
    if [ $ec -ne 0 ]; then
        echo "Error: generaterandomvalues $repcodefn $1/$metadatadir $currentid" 1>&2
        return 1
    fi

    # permute the random values (randomly n! times) and store them as $1/$metadatadir/Ip${currentid}
    mkdir -p $1/$metadatadir
    permuteinputs $1 ${repcodefn%.c}.ins $1/$metadatadir/Ip$currentid
    ec=$?
    if [ $ec -ne 0 ]; then
        echo "Error: permuteinputs $1 ${repcodefn%.c}.ins $1/$metadatadir/Ip$currentid" 1>&2
        return 1
    fi

    # move the representative to a new cluster and execute it (and store the output in $spareid/$metadatadir) unconditionally
    movecodetoanewcluster $1 $repcodefn $spareid
    if [ $? -eq 0 ]; then
        executerepcode $1/$spareid $repcodefn $1/$metadatadir/I${currentid}  # the output file is $1/$spareid/$metadatadir/O${spareid}.0.$?
        spareid=`cat $1/$metadatadir/nextid`
    fi

    pushd . >& /dev/null
    cd $1
    # extract the inputs, much faster but cost disk space, so remember to delete it afterwards
    mkdir -p $metadatadir/ins
    $scriptdir/extractallinputs $metadatadir/Ip$currentid $metadatadir/ins

    # for each code and each subcluster, 
    # if it doesn't overlap with the representative for a subcluster,
    #    then execute, store outputs, and dispatch;
    # if no matching based on outputs, then add it into a new subcluster;
    # Also, only handle files that have NOT been handled (because of interruptions during the executions on the cluster...). (Cheap impl: just count the numbers) --> TODO: not fully functional yet!
    local pLcount=`cat $1/$metadatadir/pL$currentid 2> /dev/null | wc -l`
    local Lcount=0
    local fn=
    while read fn; do
        Lcount=$((Lcount+1))
        if [ $Lcount -le $pLcount ]; then
            echo "Skip No. $Lcount file $fn due to pL$currentid" 1>&2
            continue
        fi
        fn=`echo $fn | cut -d' ' -f1`  # assume filenames contain no ' '
        if [[ "$debug" == "true" ]]; then
            echo "Searching for matching clusters for $fn under $1 ......" 1>&2
        fi
        local tonewcluster=1
        local executedonce=0
        local onecluster=
        while read onecluster; do
            local clusterid=`basename $onecluster`
            repcodefn=$(head -n 1 $onecluster/$metadatadir/C$clusterid)
            if [ $? -ne 0 ]; then # there is no valid representative file for this cluster
                continue
            fi
            if [ "$repcodefn" == "$fn" ]; then
                if [[ "$debug" == "true" ]]; then
                    echo "----> $fn is the representative for the cluster No. $onecluster" 1>&2
                fi
                tonewcluster=0
                break
            fi
            if [ $overlaplimit -lt 100 ]; then
                if ( isoverlap $fn $repcodefn $overlaplimit ); then
                    if [[ "$debug" == "true" ]]; then
                        echo "----> $fn overlaps more than ${overlaplimit}% with $repcodefn in cluster No. $onecluster" 1>&2
                    fi
                    # move the code file into $onecluster:
                    echo "$fn" >> "$onecluster/$metadatadir/L$clusterid"
                    echo "$fn" >> "$metadatadir/pL$currentid"  # keep a log which files in $1 have been processed
                    tonewcluster=0
                    continue
                fi
            fi
            # else, execute (at most once for all the subclusters) and compare its outputs with the representative
            if [ $executedonce -eq 0 ]; then
                local inputdir=$1/$metadatadir/ins
                executecode $1 $fn $inputdir
                ec=$?
                if [ $ec -ne 0 ]; then
                    echo "Error: executeandmoveall: executecode $1 $fn $inputdir" 1>&2
                    executedonce=-1
                    continue
                else
                    executedonce=1
                fi
            fi
            if [ $executedonce -ne 1 ]; then
                echo "Error: executeandmoveall: no successful execution for $fn. Skip output comparison with cluster $onecluster." 1>&2
                continue
            fi

            # only do the comparison when executions are successfully
            local repoutputfn=   # need to separate local declaration from assignment to get $?
            repoutputfn=`ls $onecluster/$metadatadir/O$clusterid.0.*`  # should be one for representatives; could be zero if error occurred
            if [ $? -ne 0 ]; then
                if [[ "$debug" == "true" ]]; then
                    echo "Error: executeandmoveall: no output found for cluster $onecluster, repcodefn=$repcodefn" 1>&2
                fi
                continue
            fi
            if [[ "$debug" == "true" ]]; then
                echo "executeandmoveall: $scriptdir/componeset $repoutputfn $metadatadir/out" 1>&2
            fi
            if ( $scriptdir/componeset $repoutputfn $metadatadir/out ); then
                if [[ "$debug" == "true" ]]; then
                    echo "----> $fn matched with $repcodefn in cluster No. $onecluster" 1>&2
                fi
                echo "$fn" >> "$onecluster/$metadatadir/L$clusterid"  # TODO: for similarity<1.0, we can't mv or break yet.
                echo "$fn" >> "$metadatadir/pL$currentid"  # keep a log which files in $1 have been processed
                tonewcluster=0
                break
            fi
        done < $metadatadir/H$currentid

        if [ $tonewcluster -eq 1 ]; then
            # if not belong to any existing cluster, create a new directory named $spareid
            if [[ "$debug" == "true" ]]; then
                echo "----> $fn matched with None. Move to a new cluster No. $spareid" 1>&2
            fi
            movecodetoanewcluster $1 $fn $spareid  # $1 should be an absolute path
            if [ $? -eq 0 ]; then
                # prepare the representative output for the new cluster
                executerepcode $spareid $fn $metadatadir/I${currentid}
                spareid=`cat $metadatadir/nextid`
            fi
        fi

    done < $metadatadir/L$currentid

    local tmpdir=
    tmpdir=`mktemp -d -p $metadatadir`
    if [ $? -ne 0 ]; then
        rm -rf $metadatadir/ins
    else
        # do it in background to save some time
        mv $metadatadir/ins $tmpdir
        rm -rf $tmpdir &
    fi

    popd >& /dev/null
    return 0
}

# Depth-firstly iterate all INPUT/i
# assume a sorted code list have been put there
# NOTE: recursion may be very slow in bash
# $1 - cluster directory
# $2 - the next available id
# Update: also save the list of newjobs in $1/$metadatadir/sge$currentid.tosubmit
iterateall ()
{
    if [[ "$debug" == "true" ]]; then
        echo "ClusterCode: iterateall: $1 $2" 1>&2
    fi

    local clusterdir=$1
    if [ ! -d "$clusterdir" ]; then
        echo "Error: iterateall: directory '$clusterdir' invalid." 1>&2
        return 65
    fi
    local currentid=`basename $1`
    if [ "$currentid" == "" ]; then
        echo "Error: iterateall: no id assigned for the input" 1>&2
        return 65
    fi
    local spareid=$2
    if [[ "$spareid" == "" || $spareid -le $currentid ]]; then
        echo "Error: iterateall: next id '$spareid' invalid. Current id $currentid" 1>&2
        return 65
    fi

    local ec=0

    mkdir -p $clusterdir/$metadatadir
    executeandmoveall $clusterdir $spareid
    ec=$?
    # return whenever an error occurs
    if [ $ec -ne 0 ]; then
      echo "Error: executeandmoveall $clusterdir $spareid" 1>&2
      return 1
    fi
    # update spareid for next run; the nextid should exist if executeandmoveall succeeds
    spareid=`cat $clusterdir/$metadatadir/nextid`

    # recursively create a new job for each subcluster
    local onecluster=
    local onenewjob=
    if [ -f "$clusterdir/$metadatadir/sge$currentid.tosubmit" ]; then
        echo -n "" > $clusterdir/$metadatadir/sge$currentid.tosubmit
    fi
    while read onecluster; do
        onecluster=$clusterdir/$onecluster
        oktoterminate $onecluster
        if [ $? -ne 0 ]; then
          echo "ClusterCode: Terminating for the cluster: $onecluster" 
        else
            onenewjob=$(newjob $scriptdir $onecluster $spareid $clusternodenumber $rootdir)
            ec=$?
            if [ $ec -ne 0 ]; then
                echo "Error: newjob $scriptdir $onecluster $spareid $clusternodenumber $rootdir" 1>&2
                echo "Error $onenewjob" >> "$clusterdir/$metadatadir/sge$currentid.tosubmit"
            else
                echo "$onenewjob" >> "$clusterdir/$metadatadir/sge$currentid.tosubmit"
            fi
            # note: different subclusters may use the same $spareid, so we don't have to update $spareid
        fi
    done < $clusterdir/$metadatadir/H$currentid
}

# transfer code trunks from-to
# $1 - the code list
# $2 - the common prefix (on NFS) of all code trunks (used mainly for "infraplacement")
# $3 - the destination directory (better to be unique)
# Also, store the new code list in $3
transfercodetrunks ()
{
    if ! [ -f $1 ]; then
        echo "Error: transfercodetrunks: codelist '$1' invalid" 1>&2
        return 65
    fi
    if ! [ -d $3 ]; then
        echo "Error: transfercodetrunks: dst dir '$3' invalid" 1>&2
        return 65
    fi
    local localcodelist=$3/`basename $1`
    if [ -f $localcodelist ]; then
        echo "Warning: transfercodetrunks: local code list exists" 1>&2
    fi

    echo -n "" >> $localcodelist
    local fn=
    local fbase=
    local fdir=
    while read fn; do
        fn=`echo $fn | cut -d' ' -f1`
        fbase=${fn#$2/}
        if [ "${fbase:0:1}" == "/" ]; then
            fbase=${fn#$3/}
            if [ "${fbase:0:1}" == "/" ]; then
                echo "Warning: transfercodetrunks: prefix '$2/' or '$3/' invalid for '$fn'. Skip it." 1>&2
                continue
            else
                fn=$2/$fbase
            fi
        fi
        fdir=`dirname $fbase`
        if [ "$fdir" != "." ]; then
            mkdir -p $3/$fdir
        fi
        fn=${fn%.*}
        fn=${fn%.*}  # remove two suffixes
        cp ${fn}.* $3/$fdir/
        echo $3/$fbase >> $localcodelist
    done < $1
    return 0
}

# set up local INPUT after transferring code
# $1 - the local codelist file
# $2 - the start id
# $3 - where to put the clusters
setuplocalclusters ()
{
    if ! [ -f $1 ]; then
        echo "Error: setuplocalclusters: invalid codelist '$1'" 1>&2
        return 65
    fi
    if ! [ -d $3 ]; then
        echo "Error: setuplocalclusters: invalid cls dir '$3'" 1>&2
        return 65
    fi
    mkdir -p $3/$2/$metadatadir
    mv $1 $3/$2/$metadatadir
}

# save the results back to home
# $1 - the local clusters
# $2 - where to save the clusters (on NFS)
# $3 - the local prefix
# $4 - the original prefix
# Also restore the filenames in codelist using $3 and $4; may be inefficient
saveclusters ()
{
    if ! [ -d $1 ]; then
        echo "Error: local cluster '$1' invalid" 1>&2
        return 65
    fi
    if ! [ -d $2 ]; then
        echo "Error: NFS cluster '$2' invalid" 1>&2
        return 65
    fi
    find $1 -name "L*" | while read lfn; do
        sed -i "s%^$3%$4" $lfn
    done
    if [ `basename $1` == `basename $2` ]; then
        cp -r $1/* $2
    else
        cp -r $1 $2
    fi
}


# create a new job for the sge cluster engine
# $1 - the $scriptdir which contains all dyclone's scripts
# $2 - the cluster directory
# $3 - the next available id
# $4 - # of ROCKS nodes
# $5 - the initial rootdir for inputs
# $6 - the name of the result shell (default: $2/$metadatadir/sge$currentid)
# NOTE: the function may be tail-recursive, no need to wait...how do we know every (sub)job is finished?
newjob ()
{
    if [ $# -lt 5 ]; then
        echo "Error: newjob: too few arguments" 1>&2
        return 65
    fi
    # don't check this since scripts on master and slave nodes may be in different directories:
    #if ! [ -d $1 ]; then
    #    echo "Error: newjob: invalid scriptdir '$1'" 1>&2
    #    return 65
    #fi
    if ! [ -d $2 ]; then
        echo "Error: newjob: invalid cluster '$2'" 1>&2
        return 65
    fi
    local currentid=`basename $2`
    if [ "$currentid" == "" ]; then
        echo "Error: newjob: no id assigned for the input" 1>&2
        return 65
    fi
    local spareid=$3
    if [[ "$spareid" == "" || $spareid -le $currentid ]]; then
        echo "Error: newjob: next id '$spareid' invalid. Current id $currentid" 1>&2
        return 65
    fi
    if [ "$6" != "" ]; then
        echo "Warning: newjob: not supported shell name" 1>&2
    fi

    # create the content of the job
    local jobname=$2/$metadatadir/sge$currentid
    echo "#!/bin/bash" > $jobname
    echo "# cwd = `pwd`" >> $jobname
    echo "#$ -cwd" >> $jobname
    echo "#$ -o $jobname.o\$JOB_ID" >> $jobname
    echo "#$ -e $jobname.e\$JOB_ID" >> $jobname
    echo "#$ -S /bin/bash" >> $jobname

    # TODO: seemly problem with SGE setting: the bash is not a login shell,
    #       so a lot of settings are wrong/inapproriate. 
    #       E.g., qsub/qstat are not in $PATH; ulimit is unset
    # echo "ulimit -c 0" >> $jobname  # make sure no core files generated
    echo ". /etc/profile" >> $jobname  # this may help circumvent the above problem.
    echo "scriptdir=$1" >> $jobname
    echo "clusternodenumber=$4" >> $jobname
    echo "rootdir=$5" >> $jobname
    echo "homedir=/home/bird/jlx/dyclone" >> $jobname
    echo "localdir=/state/partition1/bird/jlx/dyclone" >> $jobname
    echo "if ! [ -f \$scriptdir/cluster_clustercode ]; then" >> $jobname
    echo "    mkdir -p \$localdir/dyclone; cp -r \$homedir/dyclone/modules \$localdir/dyclone" >> $jobname
    echo "fi" >> $jobname
    echo ". \$scriptdir/utils.sh" >> $jobname
    echo ". \$scriptdir/config.sh" >> $jobname
    echo ". \$scriptdir/cluster_clustercode" >> $jobname
    #copy data to the local node (not portable here):
    echo "mkdir -p \$localdir/\$JOB_ID/chopper" >> $jobname
    echo "transfercodetrunks $2/$metadatadir/L$currentid \$homedir/chopper \$localdir/\$JOB_ID/chopper" >> $jobname
    echo "if [ \$? -ne 0 ]; then" >> $jobname
    echo "    echo \"Failure: transfercodetrunks $2/$metadatadir/L$currentid \$homedir/chopper \$localdir/\$JOB_ID/chopper\" 1>&2" >> $jobname
    echo "    exit 1" >> $jobname
    echo "fi" >> $jobname
    echo "setuplocalclusters \$localdir/\$JOB_ID/chopper/L$currentid $currentid \$localdir/\$JOB_ID" >> $jobname
    echo "if [ \$? -ne 0 ]; then" >> $jobname
    echo "    echo \"Failure: setuplocalclusters \$localdir/\$JOB_ID/chopper/L$currentid $currentid \$localdir/\$JOB_ID\" 1>&2" >> $jobname
    echo "    exit 1" >> $jobname
    echo "fi" >> $jobname
    #run clustering
    echo "iterateall \$localdir/\$JOB_ID/$currentid $3" >> $jobname
    echo "if [ \$? -ne 0 ]; then" >> $jobname
    echo "    echo \"Failure: iterateall \$localdir/\$JOB_ID/$currentid $3\" 1>&2" >> $jobname
    echo "    exit 1" >> $jobname
    echo "fi" >> $jobname
    #copy results back to home:
    echo "#copy results back to home" >> $jobname
    echo "saveclusters \$localdir/\$JOB_ID/$currentid $2 \$localdir/\$JOB_ID/chopper \$homedir/chopper" >> $jobname
    echo "if [ \$? -ne 0 ]; then" >> $jobname
    echo "    echo \"Failure: saveclusters \$localdir/\$JOB_ID/$currentid $2\" 1>&2" >> $jobname
    echo "    exit 1" >> $jobname
    echo "fi" >> $jobname
    echo "touch $jobname.done" >> $jobname
    #remove the local files
    echo "rm -rf \$localdir/\$JOB_ID" >> $jobname

    # On the cluster within our cs department, we can only submit jobs on the master node.
    # So, just save the $jobname (return via echo) without actual qsub
    if [ $? -ne 0 ]; then
        echo "Error: newjob: on holdonSubmitJobs. Exit." 1>&2
        return 1
    fi
    echo "$jobname"
    return 0

    # the "holdonSubmitJobs" may cause deadlocks if '$4' is not big enough; 
    # so temporarily disable it: simply submit the job to see how big a job queue SGE can handle.
    #holdonSubmitJobs $4 30
    #if [ $? -ne 0 ]; then
    #    echo "Error: newjob: on holdonSubmitJobs. Exit." 1>&2
    #    exit 1
    #fi
    local jobid=  # to get the error code, "local" declaration should be separated.
    jobid=`qsub $jobname`
    local ec=$?
    if [[ $ec -ne 0 ]]; then
        echo "Error: newjob: qsub $jobname" 1>&2
    else
        jobid=`echo $jobid | cut -d' ' -f3`
        echo "Job ID $jobid ($jobname) submitted"
    fi
    return $ec
}



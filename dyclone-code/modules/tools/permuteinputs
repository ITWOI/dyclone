#!/usr/bin/python

import sys, os
import random

if len(sys.argv) != 6:
    print >> sys.stderr, "Usage: ", sys.argv[0], " <src_inputname> <# of num> <# of ptr> <dst_inputdir> <inputid>"
    sys.exit(1)

if not os.path.isfile(sys.argv[1]):
    print >> sys.stderr, sys.argv[0], ": the input file invalid:", sys.argv[1]
    sys.exit(1)
if not os.path.isdir(sys.argv[4]):
    print >> sys.stderr, sys.argv[0], ": the input storage dir invalid:", sys.argv[4]
    sys.exit(1)


def factorial(n):
    return reduce(lambda x,y:x*y,range(1,n+1), 1)

#assume the input file has the correct format:
inf = open(sys.argv[1], 'r')

print >> sys.stderr, "Not yet fully functioning: ", sys.argv[0]
sys.exit(1)

numbers = []
pointers = []
#for line in inf.readlines():
for line in inf:
    if line == '\n':
        continue
    elif line[0].lower() == 'p':
        pointers.append(line)
    else:
        numbers.append(line)
inf.close()

cc = (len(numbers), len(pointers))
cn = int(sys.argv[2])
cp = int(sys.argv[3])
if cn>cc[0]:
    for i in range(cn-cc[0]):
        numbers.append("0")
if cp>cc[1]:
    for i in range(cp-cc[1]):
        pointers.append("p0")

# permute at most 7! times;
# TODO: handle duplicate elements. If not, what would be the benefit over the shuffle one?
maxForPermute = 7
permutenum = 1
if len(lines)>maxForPermute:
    print >> sys.stderr, "%s warning: too many inputs, only permute %d! times" % (sys.argv[0], maxForPermute)
    permutenum = factorial(maxForPermute)
else:
    permutenum = factorial(len(lines))

for i in range(permutenum):
    random.shuffle(lines) #in-place shuffle
    outf = open(sys.argv[4] + "/I" + sys.argv[5] + "." + `i`, 'w')
    for line in lines:
        print >> outf, line,
    outf.close()

sys.exit(0)

